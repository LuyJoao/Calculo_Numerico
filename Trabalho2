import numpy as np

def pivoteamento_parcial(A, b):
    n = len(A)
    pivos = []
    Ab = np.hstack((A, b.reshape(-1, 1)))
    
    for k in range(n):
        max_index = np.argmax(abs(Ab[k:, k])) + k
        pivo = Ab[max_index, k]
        pivos.append(pivo)
        
        if max_index != k:
            Ab[[k, max_index]] = Ab[[max_index, k]]
        
        for i in range(k + 1, n):
            fator = Ab[i, k] / Ab[k, k]
            Ab[i, k:] = Ab[i, k:] - fator * Ab[k, k:]
    
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i + 1:n], x[i + 1:])) / Ab[i, i]
    
    return x, pivos

A = np.array([
    [10, 3, 4, 0],
    [-1, 4, 1, 2],
    [0, 11, 3, 1],
    [-1, 2, 0, 3]
], dtype=float)

b = np.array([1, 0, 1, -1], dtype=float)

solucao, pivos = pivoteamento_parcial(A, b)

print("Pivôs usados em cada etapa:", pivos)
print("Solução do sistema:", solucao)

